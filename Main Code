
#include <EEPROM.h>
#include <GravityTDS.h>

 
#define TdsSensorPin A0
GravityTDS gravityTds;
 
//motor directory
#define CW  0
#define CCW 1

//motor control pin
#define     motorIN1  D7
#define     motorIN2  D6
#define     EnablePin D5

// PID control
float   Kp              = 5;
int     targetPPM       = 500;
int     error;
int     control;
int     rpm_motor;
 
float temperature = 25,tdsValue = 0;
long current_millis;
long previous_millis;

 
void setup()
{
    Serial.begin(115200);
    gravityTds.setPin(TdsSensorPin);
    gravityTds.setAref(3.3);  //reference voltage on ADC, default 5.0V on Arduino UNO
    gravityTds.setAdcRange(4096);  //1024 for 10bit ADC;4096 for 12bit ADC
    gravityTds.begin();  //initialization
}
 
void loop()
{
    //temperature = readTemperature();  //add your temperature sensor and read it
    gravityTds.setTemperature(temperature);  // set the temperature and execute temperature compensation
    gravityTds.update();  //sample and calculate
    current_millis = millis();
    
    if(current_millis - previous_millis >= 40){
      tdsValue = gravityTds.getTdsValue();  // then get the value
      previous_millis = current_millis;
      Serial.println(tdsValue,0);
      //Serial.println("ppm");
      }
      
    error       = targetPPM - tdsValue;
    control     = (Kp*error);

    rpm_motor = min(max(control,-255), 255);
    if(rpm_motor>=0)
    {
        digitalWrite(motorIN1, 1);
        digitalWrite(motorIN2, 0);
        analogWrite(EnablePin, rpm_motor);
    }
    else
    {
        digitalWrite(motorIN1, 0);
        digitalWrite(motorIN2, 1);         
        analogWrite(EnablePin,0);
    }
}
